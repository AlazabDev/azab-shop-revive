import { useState } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Plus, Trash2, Save, Send } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

const invoiceSchema = z.object({
  customer_name: z.string().min(1, "اسم العميل مطلوب"),
  customer_email: z.string().email("بريد إلكتروني غير صحيح").optional().or(z.literal("")),
  customer_phone: z.string().optional(),
  due_date: z.string().optional(),
  payment_method: z.string().optional(),
  notes: z.string().optional(),
  items: z.array(z.object({
    service_name: z.string().min(1, "اسم الخدمة مطلوب"),
    description: z.string().optional(),
    quantity: z.number().min(0.01, "الكمية يجب أن تكون أكبر من صفر"),
    unit_price: z.number().min(0.01, "السعر يجب أن تكون أكبر من صفر"),
  })).min(1, "يجب إضافة عنصر واحد على الأقل"),
});

type InvoiceFormData = z.infer<typeof invoiceSchema>;

interface NewInvoiceFormProps {
  onSuccess?: () => void;
  onCancel?: () => void;
}

export function NewInvoiceForm({ onSuccess, onCancel }: NewInvoiceFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isSendingEmail, setIsSendingEmail] = useState(false);
  const { toast } = useToast();

  const form = useForm<InvoiceFormData>({
    resolver: zodResolver(invoiceSchema),
    defaultValues: {
      customer_name: "",
      customer_email: "",
      customer_phone: "",
      due_date: "",
      payment_method: "",
      notes: "",
      items: [
        {
          service_name: "",
          description: "",
          quantity: 1,
          unit_price: 0,
        },
      ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "items",
  });

  const calculateTotal = () => {
    return form.watch("items").reduce((total, item) => {
      return total + (item.quantity * item.unit_price);
    }, 0);
  };

  const createInvoice = async (data: InvoiceFormData, sendEmail: boolean = false) => {
    try {
      setIsLoading(true);
      if (sendEmail) setIsSendingEmail(true);

      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        toast({
          title: "خطأ",
          description: "يجب تسجيل الدخول أولاً",
          variant: "destructive",
        });
        return;
      }

      const totalAmount = calculateTotal();

      // Create invoice (invoice_number will be auto-generated by trigger)
      const { data: invoice, error: invoiceError } = await supabase
        .from("invoices")
        .insert([{
          customer_name: data.customer_name,
          customer_email: data.customer_email || null,
          customer_phone: data.customer_phone || null,
          amount: totalAmount,
          issue_date: new Date().toISOString().split('T')[0],
          due_date: data.due_date || null,
          payment_method: data.payment_method || null,
          notes: data.notes || null,
          status: 'pending',
          currency: 'EGP',
          created_by: user.id,
          invoice_number: '', // Temporary, will be set by trigger
        } as any])
        .select()
        .single();

      if (invoiceError) throw invoiceError;

      // Create invoice items
      const invoiceItems = data.items.map(item => ({
        invoice_id: invoice.id,
        service_name: item.service_name,
        description: item.description || null,
        quantity: item.quantity,
        unit_price: item.unit_price,
      }));

      const { error: itemsError } = await supabase
        .from("invoice_items")
        .insert(invoiceItems);

      if (itemsError) throw itemsError;

      // Send email if requested and email is provided
      if (sendEmail && data.customer_email) {
        try {
          await supabase.functions.invoke('send-invoice-email', {
            body: {
              invoice: {
                ...invoice,
                items: invoiceItems,
                total_amount: totalAmount,
              },
              customer_email: data.customer_email,
            },
          });
          
          toast({
            title: "تم إنشاء الفاتورة بنجاح",
            description: "تم إرسال الفاتورة بالبريد الإلكتروني",
          });
        } catch (emailError) {
          toast({
            title: "تم إنشاء الفاتورة",
            description: "لكن فشل في إرسال البريد الإلكتروني",
            variant: "destructive",
          });
        }
      } else {
        toast({
          title: "تم إنشاء الفاتورة بنجاح",
          description: `رقم الفاتورة: ${invoice.invoice_number}`,
        });
      }

      form.reset();
      onSuccess?.();
    } catch (error: any) {
      toast({
        title: "خطأ في إنشاء الفاتورة",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      setIsSendingEmail(false);
    }
  };

  const onSubmit = (data: InvoiceFormData) => {
    createInvoice(data, false);
  };

  const onSubmitAndSend = () => {
    form.handleSubmit((data) => createInvoice(data, true))();
  };

  return (
    <Card className="card-elegant">
      <CardHeader>
        <CardTitle className="text-2xl">إنشاء فاتورة جديدة</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            {/* Customer Information */}
            <div className="grid gap-4 md:grid-cols-2">
              <FormField
                control={form.control}
                name="customer_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>اسم العميل *</FormLabel>
                    <FormControl>
                      <Input placeholder="أدخل اسم العميل" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="customer_email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>البريد الإلكتروني</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="البريد الإلكتروني" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="customer_phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>رقم الهاتف</FormLabel>
                    <FormControl>
                      <Input placeholder="رقم الهاتف" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="due_date"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>تاريخ الاستحقاق</FormLabel>
                    <FormControl>
                      <Input type="date" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="payment_method"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>طريقة الدفع</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="اختر طريقة الدفع" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="bank_transfer">تحويل بنكي</SelectItem>
                      <SelectItem value="instapay">انستاباي</SelectItem>
                      <SelectItem value="cash">نقداً</SelectItem>
                      <SelectItem value="check">شيك</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Invoice Items */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <Label className="text-lg font-semibold">عناصر الفاتورة</Label>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => append({ service_name: "", description: "", quantity: 1, unit_price: 0 })}
                  className="gap-2"
                >
                  <Plus className="h-4 w-4" />
                  إضافة عنصر
                </Button>
              </div>

              {fields.map((field, index) => (
                <Card key={field.id} className="p-4">
                  <div className="grid gap-4 md:grid-cols-4">
                    <FormField
                      control={form.control}
                      name={`items.${index}.service_name`}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>اسم الخدمة *</FormLabel>
                          <FormControl>
                            <Input placeholder="اسم الخدمة" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name={`items.${index}.quantity`}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>الكمية *</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              step="0.01"
                              placeholder="1"
                              {...field}
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name={`items.${index}.unit_price`}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>السعر *</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              step="0.01"
                              placeholder="0.00"
                              {...field}
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className="flex items-end">
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        onClick={() => remove(index)}
                        disabled={fields.length === 1}
                        className="gap-2"
                      >
                        <Trash2 className="h-4 w-4" />
                        حذف
                      </Button>
                    </div>
                  </div>

                  <FormField
                    control={form.control}
                    name={`items.${index}.description`}
                    render={({ field }) => (
                      <FormItem className="mt-4">
                        <FormLabel>الوصف</FormLabel>
                        <FormControl>
                          <Textarea placeholder="وصف الخدمة..." {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div className="mt-2 text-sm text-muted-foreground">
                    الإجمالي: {((form.watch(`items.${index}.quantity`) || 0) * (form.watch(`items.${index}.unit_price`) || 0)).toFixed(2)} جنيه
                  </div>
                </Card>
              ))}
            </div>

            {/* Total */}
            <Card className="p-4 bg-muted/50">
              <div className="text-xl font-bold text-right">
                الإجمالي: {calculateTotal().toFixed(2)} جنيه مصري
              </div>
            </Card>

            {/* Notes */}
            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>ملاحظات</FormLabel>
                  <FormControl>
                    <Textarea placeholder="ملاحظات إضافية..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Actions */}
            <div className="flex gap-4 justify-end">
              {onCancel && (
                <Button type="button" variant="outline" onClick={onCancel}>
                  إلغاء
                </Button>
              )}
              
              <Button type="submit" disabled={isLoading} className="gap-2">
                <Save className="h-4 w-4" />
                {isLoading ? "جاري الحفظ..." : "حفظ الفاتورة"}
              </Button>

              {form.watch("customer_email") && (
                <Button
                  type="button"
                  onClick={onSubmitAndSend}
                  disabled={isLoading || isSendingEmail}
                  className="gap-2"
                >
                  <Send className="h-4 w-4" />
                  {isSendingEmail ? "جاري الإرسال..." : "حفظ وإرسال"}
                </Button>
              )}
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}